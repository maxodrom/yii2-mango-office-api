<?php
/**
 * Mango Office API Yii2 module.
 *
 * @author Max Alexandrov <max@7u3.ru>
 * @link https://github.com/maxodrom/yii2-mango-office-api
 * @copyright Copyright (c) Max Alexandrov, 2018
 */

namespace maxodrom\mangooffice\models\events;

use Yii;

/**
 * This is the model class for table "{{%events_call}}".
 *
 * @property int $id ID
 * @property string $entry_id Идентификатор группы вызовов
 * @property string $call_id Идентификатор вызова (плеча вызова)
 * @property int $timestamp Время события UTC
 * @property int $seq Счетчик последовательности уведомлений по вызову
 * @property string $call_state Текущее состояние вызова
 * @property string $location Текущее расположение вызова в ВАТС
 * @property string $from_extension Идентификатор сотрудника ВАТС для вызывающего абонента
 * @property string $from_number Номер вызывающего абонента
 * @property string $from_taken_from_call_id Идентификатор вызова, в котором участвовал вызывающий абонент, до того, как был переведен в текущий вызов
 * @property string $to_extension Идентификатор сотрудника ВАТС для вызываемого абонента
 * @property string $to_number Номер вызываемого абонента
 * @property string $to_line_number Входящая линия ВАТС, на которую поступил вызов
 * @property string $to_acd_group Идентификатор группы операторов ВАТС (внутренний номер группы)
 * @property string $dct_number Номер коллтрекинга (динамический или статический)
 * @property int $dct_type Тип номера коллтрекинга
 * @property string $disconnect_reason Причина завершения вызова
 * @property string $command_id Идентификатор команды внешней системы, в результате которой появился вызов
 * @property string $task_id Идентификатор задачи исходящего обзвона, в результате которой появился вызов
 * @property string $callback_initiator Инициатор обратного звонка, в результате которого появился вызов
 * @since 1.0
 */
class Call extends \yii\db\ActiveRecord
{
    /**
     * Class constants.
     */
    const CALL_STATE_APPEARED = 'Appeared';
    const CALL_STATE_CONNECTED = 'Connected';
    const CALL_STATE_DISCONNECTED = 'Disconnected';
    const CALL_STATE_ON_HOLD = 'OnHold';
    const LOCATION_IVR = 'ivr';
    const LOCATION_QUEUE = 'queue';
    const LOCATION_ABONENT = 'abonent';

    public static $resultStatuses = [

        1000 => 'Действие успешно выполнено',
        1100 => 'Вызов завершен в нормальном режиме',
        1110 => 'Вызов завершен вызывающим абонентом',
        1111 => 'Вызов не получил ответа в течение времени ожидания',
        1120 => 'Вызов завершен вызываемым абонентом',
        1121 => 'Получен ответ "занято" от удаленной стороны',
        1122 => 'Вызов отклонен вызываемым абонентом',
        1123 => 'Получен сигнал "не беспокоить"',
        1130 => 'Ограничения для вызываемого номера',
        1131 => 'Вызываемый номер недоступен',
        1132 => 'Вызываемый номер не обслуживается',
        1133 => 'Вызываемый номер не существует',
        1134 => 'Превышено максимальное число переадресаций',
        1140 => 'Вызовы на регион запрещены настройками ВАТС',
        1150 => 'Ограничения для вызывающего номера',
        1151 => 'Вызывающий номер в «черном» списке',
        1152 => 'Вызывающий номер не найден в «белом» списке',
        1160 => 'Вызов на группу не удался',
        1161 => 'Удержание запрещено настройками ВАТС',
        1162 => 'Очередь удержания заполнена',
        1163 => 'Превышено время ожидания в очереди удержания',
        1164 => 'Все операторы в данный момент недоступны',
        1170 => 'Вызов завершен согласно схеме переадресации',
        1171 => 'Неверно настроена схема переадресации',
        1180 => 'Вызов завершен командой пользователя',
        1181 => 'Вызов завершен по команде из внешней системы',
        1182 => 'Вызов завершен перехватом на другого оператора (только для исходящих плеч)',
        1183 => 'Назначен новый оператор (при команде ApiConnect, обычно при переводах)',
        1190 => 'Вызываемый номер неактивен либо нерабочее расписание',
        1191 => 'Вызываемый номер неактивен (снят флажок активности ЛК)',
        1192 => 'Вызываемый номер неактивен по расписанию',
        2000 => 'Ограничение биллинговой системы',
        2100 => 'Доступ к счету невозможен',
        2110 => 'Счет заблокирован',
        2120 => 'Счет закрыт',
        2130 => 'Счет не обслуживается (frozen)',
        2140 => 'Счет недействителен',
        2200 => 'Доступ к счету ограничен',
        2210 => 'Доступ ограничен периодом использования',
        2211 => 'Достигнут дневной лимит использования услуги',
        2212 => 'Достигнут месячный лимит использования услуги',
        2220 => 'Количество одновременных вызовов/действий ограничено',
        2230 => 'Услуга недоступна',
        2240 => 'Недостаточно средств на счете',
        2250 => 'Ограничение на количество использований услуги в биллинге',
        2300 => 'Направление заблокировано',
        2400 => 'Ошибка биллинга',
        3000 => 'Неверный запрос',
        3100 => 'Переданы неверные параметры команды',
        3101 => 'Запрос выполнен по методу, отличному от POST',
        3102 => 'Значение ключа не соответствуют рассчитанному',
        3103 => 'В запросе отсутствует обязательный параметр',
        3104 => 'Параметр передан в неправильном формате',
        3105 => 'Неверный ключ доступа',
        3200 => 'Неверно указан номер абонента',
        3300 => 'Объект не существует',
        3310 => 'Вызов не найден',
        3320 => 'Запись разговора не найдена',
        3330 => 'Номер не найден у ВАТС или сотрудника',
        3340 => 'Файл не найден',
        4000 => 'Действие не может быть выполнено',
        4001 => 'Команда не поддерживается',
        4002 => 'Продолжительность записи меньше минимально возможной в ВАТС, запись не будет сохранена',
        4100 => 'Выполнить команду по логике работы ВАТС невозможно',
        4101 => 'Вызов завершен либо не существует',
        4102 => 'Запись разговора уже осуществляется',
        4200 => 'Связаться с абонентом в данный момент невозможно',
        4300 => 'SMS сообщение отправить не удалось',
        4301 => 'SMS сообщение устарело',
        4391 => 'SMS сообщение утеряно (статус возвращает внешний оператор)',
        4392 => 'SMS сообщение отклонено (статус возвращает внешний оператор)',
        4393 => 'SMS сообщение отменено (статус возвращает внешний оператор)',
        4400 => 'Невозможно добавить участника в конференцию',
        4401 => 'Аппаратная ошибка',
        4402 => 'Сервис не доступен',
        4403 => 'Недостаточно ресурсов',
        4404 => 'Превышено ограничение на количество участников конференции',
        4405 => 'Подключение запрещено настройками комнаты конференций',
        4500 => 'Ограничения системы безопасности',
        4501 => 'Установлено ограничение частоты звонков',
        4502 => 'Вызывающий номер в черном списке входящих номеров',
        4503 => 'Превышен максимальный размер файла',
        4504 => 'Не удалось определить размер файла',
        5000 => 'Ошибка сервера',
        5001 => 'Перегрузка',
        5002 => 'Перезапуск',
        5003 => 'Технические проблемы',
        5004 => 'Проблемы доступа к базе данных',
        6000 => 'Доставка факса не выполнялась',
        6010 => 'Технические проблемы сервиса факс-рассылок',
        6011 => 'Указанный в задании на рассылку номер недоступен в течение часа',
        6012 => 'Указанный в задании на рассылку номер не существует',
        6013 => 'На указанном номере не установлен факс-аппарат',
        6014 => 'Адресат отказался принимать факс',
        6100 => 'Ошибка при преобразовании факса',
        6101 => 'Превышен допустимый размер исходного файла (10 мегабайт)',
        6102 => 'Превышено допустимое число страниц (30)',
    ];


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'mangooffice_events_call';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['timestamp', 'seq', 'dct_type'], 'integer'],
            [
                [
                    'entry_id',
                    'call_id',
                    'from_taken_from_call_id',
                    'to_acd_group',
                    'dct_number',
                    'command_id',
                    'task_id',
                    'callback_initiator',
                ],
                'string',
                'max' => 128,
            ],
            [
                ['call_state', 'from_extension', 'to_extension', 'to_line_number'],
                'string',
                'max' => 16,
            ],
            [
                ['from_number', 'to_number'],
                'string',
                'max' => 64,
            ],
            [['location'], 'string', 'max' => 7],
            [['disconnect_reason'], 'integer'],
            [
                'call_state',
                'in',
                'range' => [
                    self::CALL_STATE_APPEARED,
                    self::CALL_STATE_CONNECTED,
                    self::CALL_STATE_DISCONNECTED,
                    self::CALL_STATE_ON_HOLD,
                ],
            ],
            [
                'location',
                'in',
                'range' => [
                    self::LOCATION_IVR,
                    self::LOCATION_ABONENT,
                    self::LOCATION_QUEUE,
                ],
            ],
            [
                'disconnect_reason',
                'in',
                'range' => array_keys(self::$resultStatuses),
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'entry_id' => 'Идентификатор группы вызовов',
            'call_id' => 'Идентификатор вызова (плеча вызова)',
            'timestamp' => 'Время события UTC',
            'seq' => 'Счетчик последовательности уведомлений по вызову',
            'call_state' => 'Текущее состояние вызова',
            'location' => 'Текущее расположение вызова в ВАТС',
            'from_extension' => 'Идентификатор сотрудника ВАТС для вызывающего абонента',
            'from_number' => 'Номер вызывающего абонента',
            'from_taken_from_call_id' => 'Идентификатор вызова, в котором участвовал вызывающий абонент, до того, как был переведен в текущий вызов',
            'to_extension' => 'Идентификатор сотрудника ВАТС для вызываемого абонента',
            'to_number' => 'Номер вызываемого абонента',
            'to_line_number' => 'Входящая линия ВАТС, на которую поступил вызов',
            'to_acd_group' => 'Идентификатор группы операторов ВАТС (внутренний номер группы)',
            'dct_number' => 'Номер коллтрекинга (динамический или статический)',
            'dct_type' => 'Тип номера коллтрекинга',
            'disconnect_reason' => 'Причина завершения вызова',
            'command_id' => 'Идентификатор команды внешней системы, в результате которой появился вызов',
            'task_id' => 'Идентификатор задачи исходящего обзвона, в результате которой появился вызов',
            'callback_initiator' => 'Инициатор обратного звонка, в результате которого появился вызов',
        ];
    }

    /**
     * {@inheritdoc}
     * @return CallQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new CallQuery(get_called_class());
    }

    /**
     * Возвращает текущее состояние вызова.
     *
     * @return array
     */
    final public static function getCallStateLabels()
    {
        return [
            self::CALL_STATE_APPEARED => 'Появился',
            self::CALL_STATE_CONNECTED => 'Соединен',
            self::CALL_STATE_DISCONNECTED => 'Отсоединен',
            self::CALL_STATE_ON_HOLD => 'На удержании',
        ];
    }

    /**
     * Возвращает мэппинг CSS-классов для состояния звонка.
     *
     * @return array
     */
    final public static function getCallStateCssClass()
    {
        return [
            self::CALL_STATE_APPEARED => 'info',
            self::CALL_STATE_CONNECTED => 'success',
            self::CALL_STATE_DISCONNECTED => 'danger',
            self::CALL_STATE_ON_HOLD => 'warning',
        ];
    }

    /**
     * Возвращает текущее расположение
     * вызова в ВАТС.
     *
     * @return array
     */
    final public static function getLocationLabels()
    {
        return [
            self::LOCATION_IVR => 'Голосовое меню',
            self::LOCATION_ABONENT => 'Сотрудник ВАТС',
            self::LOCATION_QUEUE => 'Очередь',
        ];
    }

    /**
     * Возвращает мэппинг CSS-классов для текущего
     * расположения вызова в ВАТС.
     *
     * @return array
     */
    final public static function getLocationCssClass()
    {
        return [
            self::LOCATION_IVR => 'info',
            self::LOCATION_ABONENT => 'success',
            self::LOCATION_QUEUE => 'default',
        ];
    }
}
